/*! \mainpage The AMORE++ package * * \section intro_sec Introduction * * Here you will find the documentation of the C++ component of the AMORE++ R package. * The AMORE++ package is a new version of the publicly available AMORE package for neural network training and simulation under R * * \section motiv_sec Motivation * * Since the release of the previous version of the AMORE many things have changed in the R programming world. * The advent of the Reference Classes and of packages like Rcpp, inline and RUnit compel us to write a better version of the package in order to provide a more useful framework for neural network training and simulation. * * \section RoadMap Road Map * This project is currently very active and the development team intends to provide a beta version as soon as this summer (2011) * */#include <iostream>#include <sstream>#include <algorithm>#include <vector>#include <iterator>#include <boost/shared_ptr.hpp>#include <boost/weak_ptr.hpp>#include <boost/foreach.hpp>#include <boost/ref.hpp>#include <Rcpp.h>using namespace Rcpp;class Con;class Neuron;template<typename T> class ContainerInterface;template<typename T> class Container;template<typename T> class IteratorInterface;template<typename T> class ContainerIterator;#define foreach         BOOST_FOREACH#ifndef size_type#define size_type unsigned int#endiftypedef int Handler;typedef boost::reference_wrapper<PredictBehavior> PredictBehaviorRef;typedef boost::reference_wrapper<TrainingBehavior> TrainingBehaviorRef;typedef boost::reference_wrapper<Neuron> NeuronRef;typedef boost::shared_ptr<Neuron> NeuronPtr;typedef boost::shared_ptr<Con> ConPtr;typedef boost::shared_ptr< IteratorInterface<Neuron> > NeuronIteratorInterfacePtr;typedef boost::shared_ptr< IteratorInterface<Con> > ConIteratorInterfacePtr;#include "dia/Con.h"#if 0#include "dia/IteratorInterface.h"#include "dia/ContainerInterface.h"#include "dia/Container.h"#include "dia/ContainerIterator.h"#include "dia/Neuron.h"#endiftypedef Container<Con> ConContainer;typedef Container<Neuron> NeuronContainer;#include "Con.cpp"#if 0#include "ContainerInterface.cpp"#include "Container.cpp"#include "IteratorInterface.cpp"#include "ContainerIterator.cpp"#include "Neuron.cpp"#endif