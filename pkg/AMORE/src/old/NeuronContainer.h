/* *  NeuronContainer.h * *  Created on: 03/06/2011 *  Author: mcasl * */#ifndef VECNEURON_H_#define VECNEURON_H_//!  A vector of neurons/*! *   The vecNeuron class provides a simple class for a vector of neurons. It's named after the R equivalent Reference Class. */class NeuronContainer : public Container<Neuron>{public:  typedef NeuronContainer_iterator iterator;  typedef NeuronContainer_const_iterator const_iterator;  typedef boost::shared_ptr<Neuron> value_type;  typedef value_type const &const_reference;  NeuronContainer();  NeuronContainer(std::vector<NeuronPtr> neuronContainer);  ~NeuronContainer();  int  numOfNeurons();  std::vector<int>  numOfCons();  std::vector<int>  getId();  void  setId(std::vector<int> nIds);  std::vector<std::vector<int> > // Don't forget the blank space between "> >"  getConId();  std::vector<std::vector<double> > // Don't forget the blank space between "> >"  getWeight();  std::vector<NeuronContainer>  getFrom();  void  setFrom(std::vector<NeuronContainer> neuronArray);  void  setWeight(std::vector<std::vector<double> > value);#if 0  bool  is.regular ( );  std::vector<double>  getWeight(std::vector<int> FROM);  void  setWeight(std::vector<double> value, std::vector<int> FROM);  void  erase(std::vector<int> FROM); // Move it to Container  ConContainer  select(std::vector<int> FROM); // Move it to Container  bool  validate();#endif /* 0 */};#endif /* VECNEURON_H_ */