/* *  ConContainer.h * *  Created on: 26/05/2011 *      Author: mcasl */#ifndef CONCONTAINER_H_#define CONCONTAINER_H_//!  A vector of connections/*! *   The ConContainer class provides a simple class for a vector of connections. It's named after the R equivalent Reference Class. */class ConContainer : public Container<Con>{public:  typedef std::vector<boost::shared_ptr<Con> >::iterator iterator;  typedef std::vector<boost::shared_ptr<Con> >::const_iterator const_iterator;  typedef boost::shared_ptr<Con> value_type;  typedef value_type const &const_reference;  ConContainer();  ConContainer(std::vector<ConPtr> collection);  int  numOfCons();  std::vector<int>  getId();  bool  buildAndAppend(NeuronContainerIterator firstNeuron,      NeuronContainerIterator lastNeuron,      std::vector<double>::iterator firstWeight,      std::vector<double>::iterator lastWeight)  std::vector<double>  getWeight();  std::vector<double>  getWeight(std::vector<int> nIds);  bool  setWeight(std::vector<double> nWeights);  bool  setWeight(std::vector<double> nWeights, std::vector<int> nIds);  bool  setFrom(NeuronContainer neuronContainer);  void  erase(std::vector<int> nIds);  ConContainerPtr  select(std::vector<int> nIds);  bool  validate();};#endif /* CONCONTAINER_H_ */