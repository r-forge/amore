/* * Container.h * *  Created on: 26/05/2011 *      Author: mcasl */#ifndef CONTAINER_H_#define CONTAINER_H_template<typename T>  class Container  {  protected:    std::vector<boost::shared_ptr<T> > collection; // Don't forget the space between "> >"  public:    typedef typename std::vector<boost::shared_ptr<T> >::iterator iterator;    typedef typename std::vector<boost::shared_ptr<T> >::const_iterator        const_iterator;    typedef typename boost::shared_ptr<T> value_type;    typedef value_type const &const_reference;    Container();    Container(std::vector<value> first, std::vector<value> last);    iterator    begin();    iterator    end();    typename std::vector<boost::shared_ptr<T> >    load();    void    store(typename std::vector<boost::shared_ptr<T> > collectionT);    size_type    size();    void    push_back(boost::shared_ptr<T> const &const_reference);    void    append(Container<T> containerT);    bool    show();    bool    validate();    void    reserve(int n);    void    resize(int n);    bool    empty();    void    clear();    boost::shared_ptr<T> &    operator[](size_type offset);  };#endif /* CONTAINER_H_ */