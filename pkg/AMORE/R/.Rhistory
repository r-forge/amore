return(TRUE)
}
)
ConClass$accessors(c("from","weight"))
ConClass$new(from=1, weight=0.5)
ConClass$new(from=1, weight=0.5)$validate()
ConClass$new(from=1.4, weight=0.5)$validate()
ConClass$new(from=c(1,3), weight=0.5)$validate()
NeuronClass$new(id=1, con=ConClass$new(from=1, weight=0.5) ) -> N1
NeuronClass$new(id=2, con=ConClass$new(from=2, weight=1.5))  -> N2
NeuronClass$new(id=3, con=ConClass$new(from=3, weight=1.0))  -> N3
ConClass$new(from=N1, weight=1.1) -> c14
ConClass$new(from=N2, weight=1.2) -> c24
ConClass$new(from=N3, weight=1.3) -> c34
NeuronClass$new(id=4, con=c14)-> N4
NeuronClass <- setRefClass("Neuron",
fields=list(id="integer",con="Con"),
methods= list(
show=function() {
'Customized print function
'
cat("\n Id: ", id,"\n ")
},
validate=function(){
'Object validator for internal coherence.
'
if(length(id)!=1) {
stop("[NeuronClass: Validate] From and weight must have length 1")
} else {}
return(TRUE)
}
)
NeuronClass$new(id=1, con=ConClass$new(from=1, weight=0.5) ) -> N1
NeuronClass$new(id=2, con=ConClass$new(from=2, weight=1.5))  -> N2
NeuronClass$new(id=3, con=ConClass$new(from=3, weight=1.0))  -> N3
ConClass$new(from=N1, weight=1.1) -> c14
ConClass$new(from=N2, weight=1.2) -> c24
ConClass$new(from=N3, weight=1.3) -> c34
NeuronClass$new(id=4, con=c14)-> N4
N4$con
N4$getCon()
NeuronClass$accessors(c("id","con"))
N4$getCon()
N4$getCon()$show()
setwd("/Users/mcasl/pc-ule/Trabajo/investigacion/AMORE/AMORE-git/R")
#source("AllGenerics.R")
#source("makeList.R")
source("Con.R")
source("listAMORE.R")
source("listCon.R")
c14
c24
fix(`c14`)
source('~/pc-ule/Trabajo/investigacion/AMORE/AMORE-RefClasses/R/Con.R');
NeuronClass$new(id=1, con=ConClass$new(from=1, weight=0.5) ) -> N1
NeuronClass$new(id=2, con=ConClass$new(from=2, weight=1.5))  -> N2
NeuronClass$new(id=3, con=ConClass$new(from=3, weight=1.0))  -> N3
ConClass$new(from=N1, weight=1.1) -> c14
ConClass$new(from=N2, weight=1.2) -> c24
ConClass$new(from=N3, weight=1.3) -> c34
NeuronClass$new(id=4, con=c14)-> N4
c14 <- ConClass$new(from=1, weight=0.5)
c24 <- ConClass$new(from=2, weight=0.5)
c34 <- ConClass$new(from=3, weight=0.5)
c15 <- ConClass$new(from=1, weight=0.5)
c25 <- ConClass$new(from=2, weight=0.5)
c35 <- ConClass$new(from=3, weight=0.5)
c46 <- ConClass$new(from=N4, weight=0.5)
c56 <- ConClass$new(from=N5, weight=0.5)
NeuronClass$new(id=4, con=c14) -> N4
NeuronClass$new(id=5, con=c15)  -> N5
NeuronClass$new(id=6, con=N4)  -> N6
c14 <- ConClass$new(from=1, weight=0.5)
setwd("/Users/mcasl/pc-ule/Trabajo/investigacion/AMORE/AMORE-git/R")
#source("AllGenerics.R")
#source("makeList.R")
source("Con.R")
source("listAMORE.R")
source("listCon.R")
source('~/pc-ule/Trabajo/investigacion/AMORE/AMORE-RefClasses/R/Con.R');
NeuronClass <- setRefClass("Neuron",
fields=list(id="integer",con="Con"), # poner listCon
methods= list(
show=function() {
'Customized print function
'
cat("\n Id: ", id,"\n ")
},
validate=function(){
'Object validator for internal coherence.
'
if(length(id)!=1) {
stop("[NeuronClass: Validate] From and weight must have length 1")
} else {}
return(TRUE)
}
)
NeuronClass$accessors(c("id","con"))
NeuronClass <- setRefClass("Neuron",
fields=list(id="integer",con="Con"), # poner listCon
methods= list(
show=function() {
'Customized print function
'
cat("\n Id: ", id,"\n ")
},
validate=function(){
'Object validator for internal coherence.
'
if(length(id)!=1) {
stop("[NeuronClass: Validate] From and weight must have length 1")
} else {}
return(TRUE)
}
)
NeuronClass$accessors(c("id","con"))
NeuronClass <- setRefClass("Neuron",
fields=list(id="integer",con="Con"), # poner listCon
methods= list(
show=function() {
'Customized print function
'
cat("\n Id: ", id,"\n ")
},
validate=function(){
'Object validator for internal coherence.
'
if(length(id)!=1) {
stop("[NeuronClass: Validate] From and weight must have length 1")
} else {}
return(TRUE)
}
)
NeuronClass <- setRefClass("Neuron",
fields=list(id="integer",con="Con"), # poner listCon
methods= list(
show=function() {
'Customized print function
'
cat("\n Id: ", id,"\n ")
},
validate=function(){
'Object validator for internal coherence.
'
if(length(id)!=1) {
stop("[NeuronClass: Validate] From and weight must have length 1")
} else {}
return(TRUE)
}
)
listConClass <- setRefClass("listCon",
contains="listAMORE",
methods= list(
validate=function(){
'Object validator for internal coherence.
'
if (anyDuplicated(lapply(.Data, function(x){x$getFrom()}))>0) {
stop("[listCon: Validation] Con@from duplication error")
} else {
lapply(object, function(x){x$validate})
}
return(TRUE)
}
)
listConClass$accessors(c("from","weight"))
source('~/pc-ule/Trabajo/investigacion/AMORE/AMORE-RefClasses/R/listCon.R');
listConClass <- setRefClass("listCon",
contains="listAMORE",
methods= list(
validate=function(){
'Object validator for internal coherence.
'
if (anyDuplicated(lapply(.Data, function(x){x$getFrom()}))>0) {
stop("[listCon: Validation] Con@from duplication error")
} else {
lapply(object, function(x){x$validate})
}
return(TRUE)
}
)
source('~/.active-rstudio-document');
rm(list=ls())
source('~/pc-ule/Trabajo/investigacion/AMORE/AMORE-RefClasses/R/Con.R');
?setRefClass
?basicClasses
?BasicClasses
library(methods)
?BasicClasses
??BasicClasses
help(library="methods")
?help
help(package="methods")
goMyClass <- setRefClass("myClass", fields=list(a="numeric"))
x <- goMyClass(a=1)
x <- goMyClass$new(a=1)
x$show()
x
x$a
y <- x$copy(shallow=FALSE)
y
y$a
y$a <- 4
x$a
#################################################################################
##
# 	ConClass definition:#
# 	#
#################################################################################
#
gCon <- setRefClass("Con",#
  fields=list(#
    from="ANY",#
    weight="numeric"#
  ),#
	methods= list(#
		show=function() {#
      'Customized print function #
      '#
      if (is.numeric(from)){#
        cat("\n From: ", from, "\t Weight: ", weight)#
		  } else {#
        cat("\n From: ", from$getId(), "\t Weight: ", weight)#
      }#
    },#
    validate=function(){#
      'Object validator for internal coherence.#
      '#
      if(is.numeric(from) && length(from)!=1) { #
  		  stop("[ConClass: Validate] From must have length 1")#
		  }#
      if(length(weight)!=1 ) {#
			  stop("[ConClass: Validate] Weight must have length 1")#
		  }#
		  return(TRUE)    #
    }#
		)#
)#
#
#
gCon$accessors(c("from","weight"))
#
#
#
#
#
setwd("/Users/mcasl/pc-ule/Trabajo/investigacion/AMORE/AMORE-RefClasses/R")
source("listAMORE.R")
source("listCon.R")
#
c14 <- gCon$new(from=1, weight=14.5)#
c24 <- gCon$new(from=2, weight=24.5)#
c34 <- gCon$new(from=3, weight=34.5)
#
gListCon$new() -> p#
p$.Data <- list(c14,c24, c34)#
p$show()#
#
p$validate()#
#
p$setWeight(3:1)#
p$show()#
#
p$setWeight(10:9, FROM=1:2)#
p$show()#
#
p$select(2) -> ll#
ll$show()#
#
p$setWeight(30:28)#
p$show()#
ll$show()
k
k <- p$copy(shallow=FALSE)
k$show()
k$setWeights(1:3)
k$setWeight(1:3)
k$show()
p$show()
class(k)
class(list())
k$setWeights(1:3)x
x
x$a
y$a
#
goMyClass <- setRefClass("myClass", fields=list(a="list"))#
x <- goMyClass$new(a=list(1:4, 6:10))#
x$a#
y <- x$copy(shallow=FALSE)#
y$a
y$a <- list(10,9)
y$a
x$a
#
gListCon$new() -> p#
p$.Data <- list(c14,c24, c34)#
p$show()#
#
p$validate()#
#
p$setWeight(3:1)#
p$show()#
#
p$setWeight(10:9, FROM=1:2)#
p$show()
p$show()
p$copy() -> k
k$show()
k$.Data
k$.Data[[1]] <- NULL
k$.Data
p$show()
k$show()
p$.Data
k$.Data
k$.Data
p$.Data
p$copy() -> k
p$.Data
k$.Data
p$copy(shallow=FALSE) -> k
p$.Data
k$.Data
p$copy(shallow=TRUE) -> k
p$.Data
k$.Data
p
k
