library(AMOREPP)
NetworRInterface
new
NetworRinterface
net$createFeedForwardNetwork(c(3,2,2), "Tanh", "Identity")
createFeedForwardNetwork(c(3,2,2), "Tanh", "Identity")
Modules()
Module()
modAMORE <- Module("modAMORE",  getDynLib(testCodefun))
AMOREnet <- modAMORE$NetworkRinterface
modAMORE <- Module("modAMORE",  package="AMOREPP"))
modAMORE <- Module("modAMORE",  package="AMOREPP")
modAMORE <- Module("modAMORE",  PACKAGE="AMOREPP")
AMOREnet <- modAMORE$NetworkRinterface
library("AMOREcpp"
)
NetworkRinterface ->ni
AMOREnet <- NetworkRinterface
net <- new (AMOREnet)
#checkException(net$validate(), silent=TRUE)
net$createFeedForwardNetwork(c(3,2,2), "Tanh", "Identity")
checkTrue(net$validate())
checkEquals(net$inputSize(),3)
checkEquals(net$outputSize(),2)
library(RUnit)
checkTrue(net$validate())
AMOREnet <- NetworkRinterface
net <- new (AMOREnet)
#checkException(net$validate(), silent=TRUE)
net$createFeedForwardNetwork(c(2,40,3), "Tanh", "Identity")
xSim <- runif(100000, min=-1, max=1)
ySim <- runif(100000, min=-1, max=1)
PSim <- as.matrix( rbind(xSim,ySim) )
TSim <-  as.matrix( rbind(xSim^2,ySim^2, xSim+ySim) )
# system.time(net$train(list( inputMatrix = PSim, targetMatrix   = TSim, algorithm = "ADAPTgd", learningRate = 1e-4, costFunction  = "LMS", numberOfEpochs = 100,showStep=10)))
library(AMORE)
netAMOREclassic <- newff(n.neurons=c(2,40,3), learning.rate.global=1e-4,error.criterium="LMS", Stao=NA, hidden.layer="tansig", output.layer="purelin", method="ADAPTgd")
# [1] TRUE
benchmark( sim(netAMOREclassic, t(PSim))  ,
net$sim(PSim)
, columns=c("test", "elapsed", "relative"), order="relative", replications=10)
suppressMessages(require("rbenchmark"))
benchmark( sim(netAMOREclassic, t(PSim))  ,
net$sim(PSim)
, columns=c("test", "elapsed", "relative"), order="relative", replications=10)
xtrain <- runif(1000, min=-1, max=1)
ytrain <- runif(1000, min=-1, max=1)
Ptrain <- as.matrix( rbind(xtrain,ytrain) )
targettrain <- as.matrix( rbind(xtrain^2, -ytrain^3, xtrain+ytrain))
benchmark( train(netAMOREclassic, t(Ptrain), t(targettrain), error.criterium="LMS", report=TRUE, show.step=100, n.shows=2 )  ,
net$train(list( algorithm="ADAPTgd", learningRate=1e-4, costFunction="LMS", numberOfEpochs=200, showStep=100, inputMatrix= Ptrain , targetMatrix=targettrain)
), columns=c("test", "elapsed", "relative"), order="relative", replications=10)
q()
