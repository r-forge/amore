##------ 01/06/2011 02:50:59 ------##

R version 2.13.0 (2011-04-13)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)

R es un software libre y viene sin GARANTIA ALGUNA.
Usted puede redistribuirlo bajo ciertas circunstancias.
Escriba 'license()' o 'licence()' para detalles de distribucion.

R es un proyecto colaborativo con muchos contribuyentes.
Escriba 'contributors()' para obtener m'as informaci'on y
'citation()' para saber c'omo citar R o paquetes de R en publicaciones.

Escriba 'demo()' para demostraciones, 'help()' para el sistema on-line de ayuda,
o 'help.start()' para abrir el sistema de ayuda HTML con su navegador.
Escriba 'q()' para salir de R.

> ?plot
Error en .Call("Re_ExecJCommand", paste("ui", commandId, sep = ":"), args,  : 
  C nombre de s'imbolo "Re_ExecJCommand" no est'a en la tabla de carga
> 
> require("inline")
Loading required package: inline
> require("Rcpp")
Loading required package: Rcpp
> 
> require("RUnit")
Loading required package: RUnit
> # Loading required package: RUnit
> 
> rm(list=ls(all.names=TRUE))
> 
> KnownActivationFunctions <- c("threshold", "logistic", "tanh", "identity", "exponential", "reciprocal", "square", "Gauss", "sine", "cosine", "Elliott", "arctan", "radialBasis")
> KnownNormalizationMethods <- c("none", "softmax", "simplemax")
> 
> source("pkg/AMORE/R/Con.R")
> source("pkg/AMORE/R/listAMORE.R")
> source("pkg/AMORE/R/listCon.R")
> source("pkg/AMORE/R/Neuron.R")
> source("pkg/AMORE/R/MLPneuron.R")
> source("pkg/AMORE/R/RBFneuron.R")
> source("pkg/AMORE/R/listNeuron.R")
> source("pkg/AMORE/R/listMLPneuron.R")
> source("pkg/AMORE/R/listRBFneuron.R")
> source("pkg/AMORE/R/mlpLayer.R")
> source("pkg/AMORE/R/rbfLayer.R")
> source("pkg/AMORE/R/listLayer.R")
> source("pkg/AMORE/R/listMLPlayer.R")
> source("pkg/AMORE/R/listRBFlayer.R")
> source("pkg/AMORE/R/neuralNetwork.R")
> source("pkg/AMORE/R/MLPneuralNetwork.R")
> source("pkg/AMORE/R/RBFneuralNetwork.R")
> 
> 
> 	
> 	incCode <-	paste(	readLines( "pkg/AMORE/src/AMORE.h"),	collapse = "\n" )
> 	
> 	testCode <- '
+ 			Con myCon;
+ 			Neuron MyNeuron;
+ 			Neuron * ptNeuron;
+ 			MyNeuron.setId(1);
+ 			myCon.setFromNeuron(&MyNeuron);
+ 			
+ 			ptNeuron = myCon.getFromNeuron();
+ 			int result= ptNeuron->getId();
+ 			return wrap(result);
+ 			'
> 	testCodefun <- cfunction(
+ 			sig=signature(), 
+ 			body=testCode,
+ 			includes=incCode,
+ 			otherdefs="using namespace Rcpp;", 
+ 			language="C++",
+ 			verbose=FALSE, 
+ 			convention=".Call",
+ 			Rcpp=TRUE,
+ 			cppargs=character(),
+ 			cxxargs="-I/Users/mcasl/pc-ule/Trabajo/investigacion/AMORE/AMORE-WC/AMORE-WC/pkg/AMORE/src/",
+ 			libargs=character()
+ 	)
> 	result <- testCodefun()
> 	checkEquals(result, 1)
[1] TRUE
> 	
> 	
> 	
> 	
> ?path
No documentation for 'path' in specified packages and libraries:
you could try '??path'
> ?plot
Error en .Call("Re_ExecJCommand", paste("ui", commandId, sep = ":"), args,  : 
  C nombre de s'imbolo "Re_ExecJCommand" no est'a en la tabla de carga
> 
> 	paste(getwd(),"/uploads",sep="")
[1] "/Users/mcasl/pc-ule/Trabajo/investigacion/AMORE/AMORE-WC/AMORE-WC/uploads"
> 	paste(getwd(),"/src",sep="")
[1] "/Users/mcasl/pc-ule/Trabajo/investigacion/AMORE/AMORE-WC/AMORE-WC/src"
> getwd()
[1] "/Users/mcasl/pc-ule/Trabajo/investigacion/AMORE/AMORE-WC/AMORE-WC"
> dir()
 [1] "2011-05-31 00-12-51.Rtr" "2011-05-31 00-18-04.Rtr"
 [3] "2011-05-31 00-20-35.Rtr" "2011-06-01 02-48-34.Rtr"
 [5] "2011-06-01 02-50-59.Rtr" "Doxyfile"               
 [7] "README"                  "RunDoxy.sh"             
 [9] "pkg"                     "www"                    
> dir(pkg"")
Error: inesperado string constante en "dir(pkg"""
> dir("pkg")
[1] "AMORE"
> 	paste(getwd(),"pkg/AMORE/src",sep="")
[1] "/Users/mcasl/pc-ule/Trabajo/investigacion/AMORE/AMORE-WC/AMORE-WCpkg/AMORE/src"
> 	paste(getwd(),"/pkg/AMORE/src",sep="")
[1] "/Users/mcasl/pc-ule/Trabajo/investigacion/AMORE/AMORE-WC/AMORE-WC/pkg/AMORE/src"
> paste("-I",getwd(),"/pkg/AMORE/src",sep="")
[1] "-I/Users/mcasl/pc-ule/Trabajo/investigacion/AMORE/AMORE-WC/AMORE-WC/pkg/AMORE/src"
> 	testCodefun <- cfunction(
+ 			sig=signature(), 
+ 			body=testCode,
+ 			includes=incCode,
+ 			otherdefs="using namespace Rcpp;", 
+ 			language="C++",
+ 			verbose=FALSE, 
+ 			convention=".Call",
+ 			Rcpp=TRUE,
+ 			cppargs=character(),
+ 			cxxargs= paste("-I",getwd(),"/pkg/AMORE/src",sep=""),
+ 			libargs=character()
+ 	)
> 	result <- testCodefun()
> 	checkEquals(result, 1)
[1] TRUE
> 	
> incCode <-	paste(readLines( "pkg/AMORE/src/AMORE.h"),	collapse = "\n" )
> 	testCode <- '
+ 			Con myCon;
+ 			Neuron MyNeuron;
+ 			MyNeuron.setId(16);
+ 			myCon.setFromNeuron(&MyNeuron);
+ 			
+ 			int result= myCon.getFromId();
+ 			return wrap(result);
+ 			'
> 	testCodefun <- cfunction(sig=signature(), body=testCode,includes=incCode,
+ 			otherdefs="using namespace Rcpp;", language="C++", verbose=FALSE, convention=".Call",Rcpp=TRUE,cppargs=character(),
+ 			cxxargs= paste("-I",getwd(),"/pkg/AMORE/src",sep=""), libargs=character())
> 	result <- testCodefun()
> 	checkEquals(result, 16)
[1] TRUE
> testCodefun <- cxxfunction( signature(), body=testCode , include = incCode, plugin = "Rcpp", verbose=FALSE )
> 	testCodefun <- cxxfunction( signature(), body=testCode , include = incCode, plugin = "Rcpp", verbose=FALSE )
> source("pkg/AMORE/unitTest/unitTestSuite.R")


Executing test function test.Con.Cpp.getFromId  ...  done successfully.



Executing test function test.Con.Cpp.setAndgetFromNeuron  ...  done successfully.



Executing test function test.Con.Cpp.setAndgetWeight  ...  done successfully.



Executing test function test.Con.Cpp.show  ... From:	 16 	 Weight= 	 12.400000 
 done successfully.



Executing test function test.Con.Cpp.validate.from  ...  done successfully.



Executing test function test.Con.Cpp.validate.weight  ... file550d9ce4.cpp: In function 'SEXPREC* file550d9ce4()':
file550d9ce4.cpp:64: warning: division by zero in '1.399999999999999911182158029987476766109466552734375e+0 / 0'
 done successfully.



Executing test function test.vecAMORE.Cpp.append  ... From:	 10 	 Weight= 	 1.010000 
From:	 20 	 Weight= 	 22.020000 
From:	 30 	 Weight= 	 333.030000 
From:	 40 	 Weight= 	 5.400000 
From:	 50 	 Weight= 	 2.220000 
From:	 60 	 Weight= 	 33.030000 
 done successfully.



Executing test function test.vecAMORE.Cpp.push_back  ... From:	 10 	 Weight= 	 1.010000 
From:	 20 	 Weight= 	 22.020000 
From:	 30 	 Weight= 	 333.030000 
 done successfully.



Executing test function test.vecAMORE.Cpp.setLdata.getLdata  ...  done successfully.



Executing test function test.vecAMORE.Cpp.size  ...  done successfully.



Executing test function test.vecAMORE.Cpp.validate.show  ... From:	 10 	 Weight= 	 1.010000 
From:	 20 	 Weight= 	 22.020000 
From:	 30 	 Weight= 	 333.030000 
 done successfully.



Executing test function test.vecCon.Cpp.push_back.getFromId.show  ... From:	 10 	 Weight= 	 1.010000 
From:	 20 	 Weight= 	 22.020000 
From:	 30 	 Weight= 	 333.030000 
 done successfully.



Executing test function test.vecCon.Cpp.push_back.numOfCons  ...  done successfully.



Executing test function test.gCon.getFrom_fromIsNeuron  ...  done successfully.



Executing test function test.gCon.getFrom_fromIsNumeric  ...  done successfully.



Executing test function test.gCon.getWeight  ...  done successfully.



Executing test function test.gCon.new_fromIsNeuron  ...  done successfully.



Executing test function test.gCon.new_fromIsNumeric  ...  done successfully.



Executing test function test.gCon.setFrom  ...  done successfully.



Executing test function test.gCon.setWeight  ...  done successfully.



Executing test function test.gCon.show  ... 
 From:  1 	 Weight:  14.5 done successfully.



Executing test function test.gCon.validate  ...  done successfully.



Executing test function test.gMLPneuron.new  ...  done successfully.



Executing test function test.gMLPneuron.show  ... 
------------------------------
 Id:  1
-----------------
 Bias:  9.9
------------------------------
 From:  1 	 Weight:  11
 From:  2 	 Weight:  12
 From:  3 	 Weight:  13
 From:  4 	 Weight:  14
 From:  5 	 Weight:  15
------------------------------ done successfully.



Executing test function test.gMLPneuron.validate  ...  done successfully.



Executing test function test.gNeuron.addCon  ...  done successfully.



Executing test function test.gNeuron.deleteCon  ...  done successfully.



Executing test function test.gNeuron.getCon  ...  done successfully.



Executing test function test.gNeuron.getFromId_fromIsNeuron  ...  done successfully.



Executing test function test.gNeuron.getFromId_fromIsNumeric  ...  done successfully.



Executing test function test.gNeuron.getFrom_fromIsNeuron  ...  done successfully.



Executing test function test.gNeuron.getFrom_fromIsNumeric  ...  done successfully.



Executing test function test.gNeuron.getWeight  ...  done successfully.



Executing test function test.gNeuron.new  ...  done successfully.



Executing test function test.gNeuron.numOfCons  ...  done successfully.



Executing test function test.gNeuron.setCon  ...  done successfully.



Executing test function test.gNeuron.setFrom  ...  done successfully.



Executing test function test.gNeuron.setId.getId  ...  done successfully.



Executing test function test.gNeuron.setWeight  ...  done successfully.



Executing test function test.gNeuron.show  ... 
------------------------

 Id:  1
------------------------

 From:  1 	 Weight:  11
 From:  2 	 Weight:  12
 From:  3 	 Weight:  13
 From:  4 	 Weight:  14
 From:  5 	 Weight:  15
------------------------
 done successfully.



Executing test function test.gNeuron.validate  ...  done successfully.



Executing test function test.gRBFneuron.new  ... 
------------------------------
 Id:  1
-----------------
 Width:  9.9
-----------------
 Altitude:  29.3
------------------------------
 From:  1 	 Weight:  11
 From:  2 	 Weight:  12
 From:  3 	 Weight:  13
 From:  4 	 Weight:  14
 From:  5 	 Weight:  15
------------------------------ done successfully.



Executing test function test.gRBFneuron.show  ... 
------------------------------
 Id:  1
-----------------
 Width:  9.9
-----------------
 Altitude:  29.3
------------------------------
 From:  1 	 Weight:  11
 From:  2 	 Weight:  12
 From:  3 	 Weight:  13
 From:  4 	 Weight:  14
 From:  5 	 Weight:  15
------------------------------ done successfully.



Executing test function test.gRBFneuron.validate  ...  done successfully.



Executing test function test.gListAMORE.append  ...  done successfully.



Executing test function test.gListAMORE.getLdata  ...  done successfully.



Executing test function test.gListAMORE.new  ...  done successfully.



Executing test function test.gListAMORE.push_back  ...  done successfully.



Executing test function test.gListAMORE.setLdata  ...  done successfully.



Executing test function test.gListAMORE.show  ... 
 From:  1 	 Weight:  14.5
 From:  2 	 Weight:  24.5
 From:  3 	 Weight:  34.5 done successfully.



Executing test function test.gListAMORE.validate  ...  done successfully.



Executing test function test.gListCon.delete  ...  done successfully.



Executing test function test.gListCon.getFromId_fromIsNeuron  ...  done successfully.



Executing test function test.gListCon.getFromId_fromIsNumeric  ...  done successfully.



Executing test function test.gListCon.getFrom_fromIsNeuron  ...  done successfully.



Executing test function test.gListCon.getFrom_fromIsNumeric  ...  done successfully.



Executing test function test.gListCon.getWeight_fromIsNeuron  ...  done successfully.



Executing test function test.gListCon.getWeight_fromIsNumeric  ...  done successfully.



Executing test function test.gListCon.new  ...  done successfully.



Executing test function test.gListCon.numOfCons  ...  done successfully.



Executing test function test.gListCon.populate_fromIsNeuron  ...  done successfully.



Executing test function test.gListCon.populate_fromIsNumeric  ...  done successfully.



Executing test function test.gListCon.push_back  ...  done successfully.



Executing test function test.gListCon.select  ...  done successfully.



Executing test function test.gListCon.setFrom  ...  done successfully.



Executing test function test.gListCon.setWeight  ...  done successfully.



Executing test function test.gListCon.show  ... 
 From:  1 	 Weight:  10
 From:  2 	 Weight:  9
 From:  3 	 Weight:  8
 From:  4 	 Weight:  7
 From:  5 	 Weight:  6
 From:  6 	 Weight:  5
 From:  7 	 Weight:  4
 From:  8 	 Weight:  3
 From:  9 	 Weight:  2
 From:  10 	 Weight:  1 done successfully.



Executing test function test.gListCon.validate  ...  done successfully.



Executing test function test.gListLayer.delete  ...  done successfully.



Executing test function test.gListLayer.getId  ...  done successfully.



Executing test function test.gListLayer.new_fromIsNeuron  ...  done successfully.



Executing test function test.gListLayer.new_fromIsNumeric  ...  done successfully.



Executing test function test.gListLayer.numOfLayers  ...  done successfully.



Executing test function test.gListLayer.select  ...  done successfully.



Executing test function test.glistMLPlayer.validate  ...  done successfully.



Executing test function test.gListMLPneuron.new  ...  done successfully.



Executing test function test.gListMLPneuron.populate_fromIsNeuron  ...  done successfully.



Executing test function test.gListMLPneuron.populate_fromIsNumeric  ...  done successfully.



Executing test function test.gListMLPneuron.setBias.getBias  ...  done successfully.



Executing test function test.gListMLPneuron.show  ... 
------------------------------
 Id:  1
-----------------
 Bias:  1.1
------------------------------
 From:  1 	 Weight:  11
 From:  2 	 Weight:  12
 From:  3 	 Weight:  13
------------------------------
------------------------------
 Id:  2
-----------------
 Bias:  3.4
------------------------------
 From:  1 	 Weight:  21
 From:  2 	 Weight:  22
 From:  3 	 Weight:  23
------------------------------
------------------------------
 Id:  3
-----------------
 Bias:  5.4
------------------------------
 From:  1 	 Weight:  31
 From:  2 	 Weight:  32
 From:  3 	 Weight:  33
------------------------------
------------------------------
 Id:  4
-----------------
 Bias:  9.8
------------------------------
 From:  1 	 Weight:  41
 From:  2 	 Weight:  42
 From:  3 	 Weight:  43
------------------------------
------------------------------
 Id:  5
-----------------
 Bias:  5.6
------------------------------
 From:  1 	 Weight:  51
 From:  2 	 Weight:  52
 From:  3 	 Weight:  53
------------------------------ done successfully.



Executing test function test.gListMLPneuron.validate  ...  done successfully.



Executing test function test.gListNeuron.delete  ...  done successfully.



Executing test function test.gListNeuron.getFromId_fromIsNeuron  ...  done successfully.



Executing test function test.gListNeuron.getFromId_fromIsNumeric  ...  done successfully.



Executing test function test.gListNeuron.getFrom_fromIsNumeric  ...  done successfully.



Executing test function test.gListNeuron.is.regular  ...  done successfully.



Executing test function test.gListNeuron.new.push_back.numberOfNeurons.numOfCons  ...  done successfully.



Executing test function test.gListNeuron.select  ...  done successfully.



Executing test function test.gListNeuron.setFrom.getFrom  ...  done successfully.



Executing test function test.gListNeuron.setId.getId  ...  done successfully.



Executing test function test.gListNeuron.setWeight.getWeight  ...  done successfully.



Executing test function test.gListNeuron.show  ... 
------------------------

 Id:  1
------------------------

 From:  1 	 Weight:  11
 From:  2 	 Weight:  12
 From:  3 	 Weight:  13
 From:  4 	 Weight:  14
 From:  5 	 Weight:  15
------------------------

------------------------

 Id:  2
------------------------

 From:  1 	 Weight:  1
 From:  2 	 Weight:  2
 From:  3 	 Weight:  3
 From:  4 	 Weight:  4
 From:  5 	 Weight:  5
------------------------
 done successfully.



Executing test function test.gListNeuron.validate  ...  done successfully.



Executing test function test.gListRBFlayer.validate  ...  done successfully.



Executing test function test.gListRBFneuron.new  ...  done successfully.



Executing test function test.gListRBFneuron.populate  ...  done successfully.



Executing test function test.gListRBFneuron.setAltitude.getAltitude  ...  done successfully.



Executing test function test.gListRBFneuron.setWidth.getWidth  ...  done successfully.



Executing test function test.gListRBFneuron.show  ... 
------------------------------
 Id:  1
-----------------
 Width:  1.1
-----------------
 Altitude:  1.9
------------------------------
 From:  1 	 Weight:  11
 From:  2 	 Weight:  12
 From:  3 	 Weight:  13
------------------------------
------------------------------
 Id:  2
-----------------
 Width:  3.4
-----------------
 Altitude:  8.4
------------------------------
 From:  4 	 Weight:  21
 From:  5 	 Weight:  22
 From:  6 	 Weight:  23
------------------------------
------------------------------
 Id:  3
-----------------
 Width:  5.4
-----------------
 Altitude:  8.7
------------------------------
 From:  7 	 Weight:  31
 From:  8 	 Weight:  32
 From:  9 	 Weight:  33
------------------------------
------------------------------
 Id:  4
-----------------
 Width:  9.8
-----------------
 Altitude:  3.5
------------------------------
 From:  10 	 Weight:  41
 From:  11 	 Weight:  42
 From:  12 	 Weight:  43
------------------------------
------------------------------
 Id:  5
-----------------
 Width:  5.6
-----------------
 Altitude:  7.6
------------------------------
 From:  13 	 Weight:  51
 From:  14 	 Weight:  52
 From:  15 	 Weight:  53
------------------------------ done successfully.



Executing test function test.gListRBFneuron.validate  ...  done successfully.



Executing test function test.gmlpLayer.append  ...  done successfully.



Executing test function test.gmlpLayer.delete  ...  done successfully.



Executing test function test.gmlpLayer.is.regular  ...  done successfully.



Executing test function test.gmlpLayer.new  ...  done successfully.



Executing test function test.gmlpLayer.numOfCons  ...  done successfully.



Executing test function test.gmlpLayer.setAndGetWeight  ...  done successfully.



Executing test function test.gmlpLayer.setFrom.getFrom  ...  done successfully.



Executing test function test.gmlpLayer.setId.getId  ...  done successfully.



Executing test function test.gmlpLayer.validate  ...  done successfully.



Executing test function test.grbfLayer.append  ...  done successfully.



Executing test function test.grbfLayer.delete  ...  done successfully.



Executing test function test.grbfLayer.is.regular  ...  done successfully.



Executing test function test.grbfLayer.new  ...  done successfully.



Executing test function test.grbfLayer.numOfCons  ...  done successfully.



Executing test function test.grbfLayer.setFrom.getFrom  ...  done successfully.



Executing test function test.grbfLayer.setId.getId  ...  done successfully.



Executing test function test.grbfLayer.setWeight.getWeight  ...  done successfully.



Executing test function test.grbfLayer.validate  ...  done successfully.

Mensajes de aviso perdidos
1: In isValidTestSuite(testSuites) :
  'testSuite' object is not of class 'RUnitTestSuite'.
2: In asMethod(object) : NAs introducidos por coerci'on
3: In asMethod(object) : NAs introducidos por coerci'on
4: In asMethod(object) : NAs introducidos por coerci'on
5: In asMethod(object) : NAs introducidos por coerci'on
6: In asMethod(object) : NAs introducidos por coerci'on
7: In class(value) <- "integer" : NAs introducidos por coerci'on
> incCode <-	paste(readLines( "pkg/AMORE/src/AMORE.h"),	collapse = "\n" )
> 	testCode <- '
+ 			// Data set up
+ 			Con Con1, Con2, Con3;
+ 			Neuron N1, N2, N3;
+ 			vecAMORE<Con> MyvecCon;
+ 			std::vector<int> result;
+ 			
+ 			N1.setId(10);
+ 			N2.setId(20);
+ 			N3.setId(30);
+ 			
+ 			Con1.setFromNeuron(&N1);
+ 			Con2.setFromNeuron(&N2);
+ 			Con3.setFromNeuron(&N3);
+ 			
+ 			Con1.setWeight(1.01);
+ 			Con2.setWeight(22.02);
+ 			Con3.setWeight(333.03);			
+ 			
+ 			MyvecCon.push_back(Con1);
+ 			MyvecCon.push_back(Con2);
+ 			MyvecCon.push_back(Con3);
+ 			
+ 			MyvecCon.show() ;
+ 
+ 			// Validate test
+ 			MyvecCon.validate();		
+ 			return wrap(1);
+ 			'
> 	testCodefun <- cfunction(sig=signature(), body=testCode,includes=incCode,
+ 			otherdefs="using namespace Rcpp;", language="C++", verbose=FALSE, convention=".Call",Rcpp=TRUE,cppargs=character(),
+ 			cxxargs= paste("-I",getwd(),"/pkg/AMORE/src",sep=""), libargs=character())
> 	
> 	
> 	result <- testCodefun()
From:	 10 	 Weight= 	 1.010000 
From:	 20 	 Weight= 	 22.020000 
From:	 30 	 Weight= 	 333.030000 
> 	checkEquals(result, 1)
[1] TRUE
> 	incCode <-	paste(readLines( "pkg/AMORE/src/AMORE.h"),	collapse = "\n" )
> 	testCode <- '
+ 			// Data set up
+ 			Con Con1, Con2, Con3;
+ 			Neuron N1, N2, N3;
+ 			vecAMORE<Con> MyvecCon;
+ 			std::vector<int> result;
+ 			
+ 			N1.setId(10);
+ 			N2.setId(20);
+ 			N3.setId(30);
+ 			
+ 			Con1.setFromNeuron(&N1);
+ 			Con2.setFromNeuron(&N2);
+ 			Con3.setFromNeuron(&N3);
+ 			
+ 			Con1.setWeight(1.01);
+ 			Con2.setWeight(22.02);
+ 			Con3.setWeight(333.03);			
+ 			
+ 			MyvecCon.push_back(Con1);
+ 			MyvecCon.push_back(Con2);
+ 			MyvecCon.push_back(Con3);
+ 			
+ 			MyvecCon.show() ;
+ 
+ 			// Validate test
+ 			MyvecCon.validate();		
+ 			return wrap(1);
+ 			'
> 	testCodefun <- cfunction(sig=signature(), body=testCode,includes=incCode,
+ 			otherdefs="using namespace Rcpp;", language="C++", verbose=FALSE, convention=".Call",Rcpp=TRUE,cppargs=character(),
+ 			cxxargs= paste("-I",getwd(),"/pkg/AMORE/src",sep=""), libargs=character())
file90a855.cpp:25:32: error: boost/shared_ptr.hpp: No such file or directory
make: *** [file90a855.o] Error 1

ERROR(s) during compilation: source code errors or compiler configuration errors!

Program source:
  1: #include <Rcpp.h>
  2: 
  3: /*! \mainpage The AMORE++ package
  4:  *
  5:  * \section intro_sec Introduction
  6:  *
  7:  * Here you will find the documentation of the C++ component of the AMORE++ R package.
  8:  * The AMORE++ package is a new version of the publicly available AMORE package for neural network training and simulation under R
  9:  *
 10:  * \section motiv_sec Motivation
 11:  *
 12:  * Since the release of the previous version of the AMORE many things have changed in the R programming world.
 13:  * The advent of the Reference Classes and of packages like Rcpp, inline and RUnit compel us to write a better version of the package in order to provide a more useful framework for neural network training and simulation.
 14:  *
 15:  * \section RoadMap Road Map
 16:  * This project is currently very active and the development team intends to provide a beta version as soon as this summer (2011)
 17:  *
 18:  */
 19: 
 20: 
 21: #include <iostream>
 22: #include <sstream>
 23: #include <algorithm>
 24: #include <vector>
 25: #include <boost/shared_ptr.hpp>
 26: #include <Rcpp.h>
 27: 
 28: using namespace Rcpp;
 29: 
 30: class Con;
 31: template <typename T> class vecAMORE;
 32: class vecCon;
 33: class Neuron;
 34: 
 35: 
 36: #include "Con.h"
 37: #include "vecAMORE.h"
 38: #include "vecCon.h"
 39: #include "Neuron.h"
 40: 
 41: 
 42: 
 43: #ifndef INLINE_R
 44: 
 45: #include "Con.cpp"
 46: #include "vecAMORE.cpp"
 47: #include "vecCon.cpp"
 48: #include "Neuron.cpp"
 49: 
 50: #endif /* INLINE_R_ */
 51: 
 52: 
 53: using namespace Rcpp;
 54: extern "C" {
 55:   SEXP file90a855 (  );
 56: }
 57: 
 58: SEXP file90a855 (  ) {
 59: 
 60: 			// Data set up
 61: 			Con Con1, Con2, Con3;
 62: 			Neuron N1, N2, N3;
 63: 			vecAMORE<Con> MyvecCon;
 64: 			std::vector<int> result;
 65: 			
 66: 			N1.setId(10);
 67: 			N2.setId(20);
 68: 			N3.setId(30);
 69: 			
 70: 			Con1.setFromNeuron(&N1);
 71: 			Con2.setFromNeuron(&N2);
 72: 			Con3.setFromNeuron(&N3);
 73: 			
 74: 			Con1.setWeight(1.01);
 75: 			Con2.setWeight(22.02);
 76: 			Con3.setWeight(333.03);			
 77: 			
 78: 			MyvecCon.push_back(Con1);
 79: 			MyvecCon.push_back(Con2);
 80: 			MyvecCon.push_back(Con3);
 81: 			
 82: 			MyvecCon.show() ;
 83: 
 84: 			// Validate test
 85: 			MyvecCon.validate();		
 86: 			return wrap(1);
 87: 			
 88:   Rf_warning("your C program does not return anything!");
 89:   return R_NilValue;
 90: }
Error en compileCode(f, code, language, verbose) : 
  Compilation ERROR, function(s)/method(s) not created! file90a855.cpp:25:32: error: boost/shared_ptr.hpp: No such file or directory
make: *** [file90a855.o] Error 1
Adem'as: Mensajes de aviso perdidos
comando ejecutado '/Library/Frameworks/R.framework/Resources/bin/R CMD SHLIB file90a855.cpp 2> file90a855.cpp.err.txt' tiene estatus 1 
> 	
> 	
> 	result <- testCodefun()
From:	 10 	 Weight= 	 1.010000 
From:	 20 	 Weight= 	 22.020000 
From:	 30 	 Weight= 	 333.030000 
> 	testCodefun <- cfunction(sig=signature(), body=testCode,includes=incCode,
+ 			otherdefs="using namespace Rcpp;", language="C++", verbose=FALSE, convention=".Call",Rcpp=TRUE,cppargs=character(),
+ 			cxxargs= paste("-I",getwd(),"/pkg/AMORE/src -I/opt/local/include",sep=""), libargs=character())
> 	
> source("pkg/AMORE/unitTest/unitTestSuite.R")


Executing test function test.Con.Cpp.getFromId  ...  done successfully.



Executing test function test.Con.Cpp.setAndgetFromNeuron  ...  done successfully.



Executing test function test.Con.Cpp.setAndgetWeight  ...  done successfully.



Executing test function test.Con.Cpp.show  ... From:	 16 	 Weight= 	 12.400000 
 done successfully.



Executing test function test.Con.Cpp.validate.from  ...  done successfully.



Executing test function test.Con.Cpp.validate.weight  ... file7f1cfbe3.cpp: In function 'SEXPREC* file7f1cfbe3()':
file7f1cfbe3.cpp:64: warning: division by zero in '1.399999999999999911182158029987476766109466552734375e+0 / 0'
 done successfully.



Executing test function test.vecAMORE.Cpp.append  ... From:	 10 	 Weight= 	 1.010000 
From:	 20 	 Weight= 	 22.020000 
From:	 30 	 Weight= 	 333.030000 
From:	 40 	 Weight= 	 5.400000 
From:	 50 	 Weight= 	 2.220000 
From:	 60 	 Weight= 	 33.030000 
 done successfully.



Executing test function test.vecAMORE.Cpp.push_back  ... From:	 10 	 Weight= 	 1.010000 
From:	 20 	 Weight= 	 22.020000 
From:	 30 	 Weight= 	 333.030000 
 done successfully.



Executing test function test.vecAMORE.Cpp.setLdata.getLdata  ...  done successfully.



Executing test function test.vecAMORE.Cpp.size  ...  done successfully.



Executing test function test.vecAMORE.Cpp.validate.show  ... From:	 10 	 Weight= 	 1.010000 
From:	 20 	 Weight= 	 22.020000 
From:	 30 	 Weight= 	 333.030000 
 done successfully.



Executing test function test.vecCon.Cpp.push_back.getFromId.show  ... From:	 10 	 Weight= 	 1.010000 
From:	 20 	 Weight= 	 22.020000 
From:	 30 	 Weight= 	 333.030000 
 done successfully.



Executing test function test.vecCon.Cpp.push_back.numOfCons  ...  done successfully.



Executing test function test.gCon.getFrom_fromIsNeuron  ...  done successfully.



Executing test function test.gCon.getFrom_fromIsNumeric  ...  done successfully.



Executing test function test.gCon.getWeight  ...  done successfully.



Executing test function test.gCon.new_fromIsNeuron  ...  done successfully.



Executing test function test.gCon.new_fromIsNumeric  ...  done successfully.



Executing test function test.gCon.setFrom  ...  done successfully.



Executing test function test.gCon.setWeight  ...  done successfully.



Executing test function test.gCon.show  ... 
 From:  1 	 Weight:  14.5 done successfully.



Executing test function test.gCon.validate  ...  done successfully.



Executing test function test.gMLPneuron.new  ...  done successfully.



Executing test function test.gMLPneuron.show  ... 
------------------------------
 Id:  1
-----------------
 Bias:  9.9
------------------------------
 From:  1 	 Weight:  11
 From:  2 	 Weight:  12
 From:  3 	 Weight:  13
 From:  4 	 Weight:  14
 From:  5 	 Weight:  15
------------------------------ done successfully.



Executing test function test.gMLPneuron.validate  ...  done successfully.



Executing test function test.gNeuron.addCon  ...  done successfully.



Executing test function test.gNeuron.deleteCon  ...  done successfully.



Executing test function test.gNeuron.getCon  ...  done successfully.



Executing test function test.gNeuron.getFromId_fromIsNeuron  ...  done successfully.



Executing test function test.gNeuron.getFromId_fromIsNumeric  ...  done successfully.



Executing test function test.gNeuron.getFrom_fromIsNeuron  ...  done successfully.



Executing test function test.gNeuron.getFrom_fromIsNumeric  ...  done successfully.



Executing test function test.gNeuron.getWeight  ...  done successfully.



Executing test function test.gNeuron.new  ...  done successfully.



Executing test function test.gNeuron.numOfCons  ...  done successfully.



Executing test function test.gNeuron.setCon  ...  done successfully.



Executing test function test.gNeuron.setFrom  ...  done successfully.



Executing test function test.gNeuron.setId.getId  ...  done successfully.



Executing test function test.gNeuron.setWeight  ...  done successfully.



Executing test function test.gNeuron.show  ... 
------------------------

 Id:  1
------------------------

 From:  1 	 Weight:  11
 From:  2 	 Weight:  12
 From:  3 	 Weight:  13
 From:  4 	 Weight:  14
 From:  5 	 Weight:  15
------------------------
 done successfully.



Executing test function test.gNeuron.validate  ...  done successfully.



Executing test function test.gRBFneuron.new  ... 
------------------------------
 Id:  1
-----------------
 Width:  9.9
-----------------
 Altitude:  29.3
------------------------------
 From:  1 	 Weight:  11
 From:  2 	 Weight:  12
 From:  3 	 Weight:  13
 From:  4 	 Weight:  14
 From:  5 	 Weight:  15
------------------------------ done successfully.



Executing test function test.gRBFneuron.show  ... 
------------------------------
 Id:  1
-----------------
 Width:  9.9
-----------------
 Altitude:  29.3
------------------------------
 From:  1 	 Weight:  11
 From:  2 	 Weight:  12
 From:  3 	 Weight:  13
 From:  4 	 Weight:  14
 From:  5 	 Weight:  15
------------------------------ done successfully.



Executing test function test.gRBFneuron.validate  ...  done successfully.



Executing test function test.gListAMORE.append  ...  done successfully.



Executing test function test.gListAMORE.getLdata  ...  done successfully.



Executing test function test.gListAMORE.new  ...  done successfully.



Executing test function test.gListAMORE.push_back  ...  done successfully.



Executing test function test.gListAMORE.setLdata  ...  done successfully.



Executing test function test.gListAMORE.show  ... 
 From:  1 	 Weight:  14.5
 From:  2 	 Weight:  24.5
 From:  3 	 Weight:  34.5 done successfully.



Executing test function test.gListAMORE.validate  ...  done successfully.



Executing test function test.gListCon.delete  ...  done successfully.



Executing test function test.gListCon.getFromId_fromIsNeuron  ...  done successfully.



Executing test function test.gListCon.getFromId_fromIsNumeric  ...  done successfully.



Executing test function test.gListCon.getFrom_fromIsNeuron  ...  done successfully.



Executing test function test.gListCon.getFrom_fromIsNumeric  ...  done successfully.



Executing test function test.gListCon.getWeight_fromIsNeuron  ...  done successfully.



Executing test function test.gListCon.getWeight_fromIsNumeric  ...  done successfully.



Executing test function test.gListCon.new  ...  done successfully.



Executing test function test.gListCon.numOfCons  ...  done successfully.



Executing test function test.gListCon.populate_fromIsNeuron  ...  done successfully.



Executing test function test.gListCon.populate_fromIsNumeric  ...  done successfully.



Executing test function test.gListCon.push_back  ...  done successfully.



Executing test function test.gListCon.select  ...  done successfully.



Executing test function test.gListCon.setFrom  ...  done successfully.



Executing test function test.gListCon.setWeight  ...  done successfully.



Executing test function test.gListCon.show  ... 
 From:  1 	 Weight:  10
 From:  2 	 Weight:  9
 From:  3 	 Weight:  8
 From:  4 	 Weight:  7
 From:  5 	 Weight:  6
 From:  6 	 Weight:  5
 From:  7 	 Weight:  4
 From:  8 	 Weight:  3
 From:  9 	 Weight:  2
 From:  10 	 Weight:  1 done successfully.



Executing test function test.gListCon.validate  ...  done successfully.



Executing test function test.gListLayer.delete  ...  done successfully.



Executing test function test.gListLayer.getId  ...  done successfully.



Executing test function test.gListLayer.new_fromIsNeuron  ...  done successfully.



Executing test function test.gListLayer.new_fromIsNumeric  ...  done successfully.



Executing test function test.gListLayer.numOfLayers  ...  done successfully.



Executing test function test.gListLayer.select  ...  done successfully.



Executing test function test.glistMLPlayer.validate  ...  done successfully.



Executing test function test.gListMLPneuron.new  ...  done successfully.



Executing test function test.gListMLPneuron.populate_fromIsNeuron  ...  done successfully.



Executing test function test.gListMLPneuron.populate_fromIsNumeric  ...  done successfully.



Executing test function test.gListMLPneuron.setBias.getBias  ...  done successfully.



Executing test function test.gListMLPneuron.show  ... 
------------------------------
 Id:  1
-----------------
 Bias:  1.1
------------------------------
 From:  1 	 Weight:  11
 From:  2 	 Weight:  12
 From:  3 	 Weight:  13
------------------------------
------------------------------
 Id:  2
-----------------
 Bias:  3.4
------------------------------
 From:  1 	 Weight:  21
 From:  2 	 Weight:  22
 From:  3 	 Weight:  23
------------------------------
------------------------------
 Id:  3
-----------------
 Bias:  5.4
------------------------------
 From:  1 	 Weight:  31
 From:  2 	 Weight:  32
 From:  3 	 Weight:  33
------------------------------
------------------------------
 Id:  4
-----------------
 Bias:  9.8
------------------------------
 From:  1 	 Weight:  41
 From:  2 	 Weight:  42
 From:  3 	 Weight:  43
------------------------------
------------------------------
 Id:  5
-----------------
 Bias:  5.6
------------------------------
 From:  1 	 Weight:  51
 From:  2 	 Weight:  52
 From:  3 	 Weight:  53
------------------------------ done successfully.



Executing test function test.gListMLPneuron.validate  ...  done successfully.



Executing test function test.gListNeuron.delete  ...  done successfully.



Executing test function test.gListNeuron.getFromId_fromIsNeuron  ...  done successfully.



Executing test function test.gListNeuron.getFromId_fromIsNumeric  ...  done successfully.



Executing test function test.gListNeuron.getFrom_fromIsNumeric  ...  done successfully.



Executing test function test.gListNeuron.is.regular  ...  done successfully.



Executing test function test.gListNeuron.new.push_back.numberOfNeurons.numOfCons  ...  done successfully.



Executing test function test.gListNeuron.select  ...  done successfully.



Executing test function test.gListNeuron.setFrom.getFrom  ...  done successfully.



Executing test function test.gListNeuron.setId.getId  ...  done successfully.



Executing test function test.gListNeuron.setWeight.getWeight  ...  done successfully.



Executing test function test.gListNeuron.show  ... 
------------------------

 Id:  1
------------------------

 From:  1 	 Weight:  11
 From:  2 	 Weight:  12
 From:  3 	 Weight:  13
 From:  4 	 Weight:  14
 From:  5 	 Weight:  15
------------------------

------------------------

 Id:  2
------------------------

 From:  1 	 Weight:  1
 From:  2 	 Weight:  2
 From:  3 	 Weight:  3
 From:  4 	 Weight:  4
 From:  5 	 Weight:  5
------------------------
 done successfully.



Executing test function test.gListNeuron.validate  ...  done successfully.



Executing test function test.gListRBFlayer.validate  ...  done successfully.



Executing test function test.gListRBFneuron.new  ...  done successfully.



Executing test function test.gListRBFneuron.populate  ...  done successfully.



Executing test function test.gListRBFneuron.setAltitude.getAltitude  ...  done successfully.



Executing test function test.gListRBFneuron.setWidth.getWidth  ...  done successfully.



Executing test function test.gListRBFneuron.show  ... 
------------------------------
 Id:  1
-----------------
 Width:  1.1
-----------------
 Altitude:  1.9
------------------------------
 From:  1 	 Weight:  11
 From:  2 	 Weight:  12
 From:  3 	 Weight:  13
------------------------------
------------------------------
 Id:  2
-----------------
 Width:  3.4
-----------------
 Altitude:  8.4
------------------------------
 From:  4 	 Weight:  21
 From:  5 	 Weight:  22
 From:  6 	 Weight:  23
------------------------------
------------------------------
 Id:  3
-----------------
 Width:  5.4
-----------------
 Altitude:  8.7
------------------------------
 From:  7 	 Weight:  31
 From:  8 	 Weight:  32
 From:  9 	 Weight:  33
------------------------------
------------------------------
 Id:  4
-----------------
 Width:  9.8
-----------------
 Altitude:  3.5
------------------------------
 From:  10 	 Weight:  41
 From:  11 	 Weight:  42
 From:  12 	 Weight:  43
------------------------------
------------------------------
 Id:  5
-----------------
 Width:  5.6
-----------------
 Altitude:  7.6
------------------------------
 From:  13 	 Weight:  51
 From:  14 	 Weight:  52
 From:  15 	 Weight:  53
------------------------------ done successfully.



Executing test function test.gListRBFneuron.validate  ...  done successfully.



Executing test function test.gmlpLayer.append  ...  done successfully.



Executing test function test.gmlpLayer.delete  ...  done successfully.



Executing test function test.gmlpLayer.is.regular  ...  done successfully.



Executing test function test.gmlpLayer.new  ...  done successfully.



Executing test function test.gmlpLayer.numOfCons  ...  done successfully.



Executing test function test.gmlpLayer.setAndGetWeight  ...  done successfully.



Executing test function test.gmlpLayer.setFrom.getFrom  ...  done successfully.



Executing test function test.gmlpLayer.setId.getId  ...  done successfully.



Executing test function test.gmlpLayer.validate  ...  done successfully.



Executing test function test.grbfLayer.append  ...  done successfully.



Executing test function test.grbfLayer.delete  ...  done successfully.



Executing test function test.grbfLayer.is.regular  ...  done successfully.



Executing test function test.grbfLayer.new  ...  done successfully.



Executing test function test.grbfLayer.numOfCons  ...  done successfully.



Executing test function test.grbfLayer.setFrom.getFrom  ...  done successfully.



Executing test function test.grbfLayer.setId.getId  ...  done successfully.



Executing test function test.grbfLayer.setWeight.getWeight  ...  done successfully.



Executing test function test.grbfLayer.validate  ...  done successfully.

Mensajes de aviso perdidos
1: In isValidTestSuite(testSuites) :
  'testSuite' object is not of class 'RUnitTestSuite'.
2: In asMethod(object) : NAs introducidos por coerci'on
3: In asMethod(object) : NAs introducidos por coerci'on
4: In asMethod(object) : NAs introducidos por coerci'on
5: In asMethod(object) : NAs introducidos por coerci'on
6: In asMethod(object) : NAs introducidos por coerci'on
7: In class(value) <- "integer" : NAs introducidos por coerci'on
> incCode <-	paste(readLines( "pkg/AMORE/src/AMORE.h"),	collapse = "\n" )
> 	testCode <- '
+ 			// Data set up
+ 			Con Con1, Con2, Con3;
+ 			Neuron N1, N2, N3;
+ 			vecAMORE<Con> MyvecCon;
+ 			std::vector<int> result;
+ 			
+ 			N1.setId(10);
+ 			N2.setId(20);
+ 			N3.setId(30);
+ 			
+ 			Con1.setFromNeuron(&N1);
+ 			Con2.setFromNeuron(&N2);
+ 			Con3.setFromNeuron(&N3);
+ 			
+ 			Con1.setWeight(1.01);
+ 			Con2.setWeight(22.02);
+ 			Con3.setWeight(333.03);			
+ 			
+ 			MyvecCon.push_back(Con1);
+ 			MyvecCon.push_back(Con2);
+ 			MyvecCon.push_back(Con3);
+ 			
+ 			MyvecCon.show() ;
+ 
+ 			// Validate test
+ 			MyvecCon.validate();		
+ 			return wrap(1);
+ 			'
> 	testCodefun <- cfunction(sig=signature(), body=testCode,includes=incCode,
+ 			otherdefs="using namespace Rcpp;", language="C++", verbose=FALSE, convention=".Call",Rcpp=TRUE,cppargs=characte